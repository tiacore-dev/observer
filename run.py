import os
from dotenv import load_dotenv
from app import create_app
from app.database.models import Users, UserRoles, Companies, UserCompanyRelations
from app.scheduler.scheduler import start_scheduler

load_dotenv()


MAIN_PROCESS_PID = os.getpid()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º PID –¥–æ –∑–∞–ø—É—Å–∫–∞ Gunicorn
# –ü–æ—Ä—Ç –∏ –±–∏–Ω–¥–∏–Ω–≥
PORT = 8000

CONFIG_NAME = os.getenv('CONFIG_NAME')

app = create_app(config_name=CONFIG_NAME)


async def create_admin():
    try:
        user = await Users.get_or_none(username="admin")
        if user:
            print("–ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        role = await UserRoles.create(role_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        company = await Companies.create(company_name="Tiacore")

        password = os.getenv('PASSWORD')
        if not password:
            raise ValueError("PASSWORD not set in environment variables.")

        user = await Users.create_user(
            username="admin",
            password=password,
        )
        print(f"‚úÖ Admin {user.username} created successfully.")
        await UserCompanyRelations.create(
            role=role, company=company, user=user)

        print("‚úÖ Relation created successfully.")

    except Exception as e:
        print("‚ùå Error during admin creation:", e)


@app.on_event("startup")
async def startup_event():
    print(f"üß† Startup in PID {os.getpid()}, main PID is {MAIN_PROCESS_PID}")
    if os.getpid() != MAIN_PROCESS_PID:
        return  # –Ω–µ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await create_admin()
    await start_scheduler()

# üìå –ó–∞–ø—É—Å–∫ Uvicorn
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(PORT), reload=True)
