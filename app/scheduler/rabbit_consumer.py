import asyncio
import json

import aio_pika
from dotenv import load_dotenv
from loguru import logger

from app.scheduler.add_or_remove_schedules import add_schedule_job, remove_schedule_job

load_dotenv()


async def consume_schedule_events(settings):
    retry_delay = 5  # —Å–µ–∫—É–Ω–¥
    while True:
        try:
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ: {settings.BROKER_DATA}")
            connection = await aio_pika.connect_robust(settings.BROKER_DATA)
            channel = await connection.channel()
            queue = await channel.declare_queue("schedules", durable=True)

            logger.info("üéß –ó–∞–ø—É—â–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å –æ—á–µ—Ä–µ–¥–∏ 'schedules'")

            async with queue.iterator() as queue_iter:
                async for message in queue_iter:
                    async with message.process():
                        try:
                            data = json.loads(message.body)
                            action = data.get("action")
                            schedule_id = data.get("schedule_id")

                            logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {data}")

                            if not schedule_id or not action:
                                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
                                continue

                            if action == "add":
                                from app.database.models import ChatSchedule

                                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {schedule_id}")
                                schedule = await ChatSchedule.get(
                                    id=schedule_id
                                ).prefetch_related("chat", "prompt", "bot")
                                add_schedule_job(schedule, settings)
                                logger.success(
                                    f"‚úÖ –ó–∞–¥–∞—á–∞ {schedule_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."
                                )

                            elif action == "delete":
                                logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {schedule_id}")
                                try:
                                    remove_schedule_job(schedule_id)
                                    logger.success(
                                        f"""‚ùå –ó–∞–¥–∞—á–∞ {schedule_id} 
                                        —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
                                    )
                                except Exception as e:
                                    logger.warning(
                                        f"""‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å 
                                        –∑–∞–¥–∞—á—É {schedule_id}: {e}"""
                                    )

                            else:
                                logger.warning(
                                    f"""‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action}' 
                                    –¥–ª—è –∑–∞–¥–∞—á–∏ {schedule_id}"""
                                )

                        except Exception as e:
                            logger.error(
                                f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True
                            )

        except aio_pika.exceptions.AMQPConnectionError as e:
            logger.error(f"üêá –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ: {e}")
            logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(retry_delay)
        except Exception as e:
            logger.exception(f"üî• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ consumer-–µ: {e}")
            await asyncio.sleep(retry_delay)
