from datetime import datetime, timezone
import asyncio
from loguru import logger
from app.database.models import ChatSchedules
from app.scheduler.init_scheduler import scheduler
from app.scheduler.executors import execute_analysis


def add_schedule_job(sched: ChatSchedules):
    job_id = f"{sched.schedule_id}"

    logger.debug(
        f"""–°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É:
        ‚îú‚îÄ ID: {job_id}
        ‚îú‚îÄ –¢–∏–ø: {sched.schedule_type}
        ‚îú‚îÄ –ê–∫—Ç–∏–≤–Ω–æ: {sched.enabled}
        ‚îú‚îÄ –ü–µ—Ä–∏–æ–¥: hours={sched.interval_hours}, minutes={sched.interval_minutes}
        ‚îú‚îÄ Time of day: {sched.time_of_day}
        ‚îú‚îÄ Cron: {sched.cron_expression}
        ‚îî‚îÄ Once: {sched.run_at}"""
    )

    if not sched.enabled:
        logger.info(f"‚õî –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        return

    if sched.schedule_type == "daily_time":
        if sched.time_of_day is None:
            logger.warning(
                f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫.")
            return

        scheduler.add_job(
            execute_analysis,
            trigger="cron",
            hour=sched.time_of_day.hour,
            minute=sched.time_of_day.minute,
            args=[sched],
            id=job_id,
            replace_existing=True
        )

    elif sched.schedule_type == "interval":
        hours = sched.interval_hours or 0
        minutes = sched.interval_minutes or 0
        if hours == 0 and minutes == 0:
            logger.warning(
                f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –∑–∞–¥–∞–Ω.")
            return

        scheduler.add_job(
            execute_analysis,
            trigger="interval",
            hours=hours,
            minutes=minutes,
            args=[sched],
            id=job_id,
            replace_existing=True
        )

    elif sched.schedule_type == "cron":
        if not sched.cron_expression:
            logger.warning(
                f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞: cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
            return
        try:
            from apscheduler.triggers.cron import CronTrigger
            trigger = CronTrigger.from_crontab(sched.cron_expression)
        except Exception as e:
            logger.warning(
                f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞: –æ—à–∏–±–∫–∞ –≤ cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–∏: {e}")
            return

        scheduler.add_job(
            execute_analysis,
            trigger=trigger,
            args=[sched],
            id=job_id,
            replace_existing=True
        )

    elif sched.schedule_type == "once":
        if not sched.run_at:
            logger.warning(
                f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞.")
            return

        now = datetime.now(timezone.utc)

        if sched.run_at < now:
            logger.warning(
                f"‚è∞ –í—Ä–µ–º—è {sched.run_at} —É–∂–µ –ø—Ä–æ—à–ª–æ. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É {job_id} –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
            )
            asyncio.create_task(execute_analysis(sched))  # –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            return

        scheduler.add_job(
            execute_analysis,
            trigger="date",
            run_date=sched.run_at,
            args=[sched],
            id=job_id,
            replace_existing=True
        )
    else:
        logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {sched.schedule_type}")
        return

    logger.success(
        f"üóìÔ∏è –ó–∞–¥–∞—á–∞ {job_id} ({sched.schedule_type}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")


def remove_schedule_job(schedule_id):
    try:
        job = scheduler.get_job(str(schedule_id))
        if job:
            scheduler.remove_job(str(schedule_id))
            logger.info(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {schedule_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        else:
            logger.warning(
                f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {schedule_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {schedule_id}: {e}")
