from loguru import logger
from app.database.models import ChatSchedules
from app.scheduler.init_scheduler import scheduler
from app.scheduler.executors import execute_analysis


def add_schedule_job(sched: ChatSchedules):
    job_id = f"{sched.schedule_id}"

    logger.debug(
        f"""–°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É:
        ‚îú‚îÄ ID: {job_id}
        ‚îú‚îÄ –¢–∏–ø: {sched.schedule_type}
        ‚îú‚îÄ –ê–∫—Ç–∏–≤–Ω–æ: {sched.enabled}
        ‚îú‚îÄ –ü–µ—Ä–∏–æ–¥: hours={sched.interval_hours}, minutes={sched.interval_minutes}
        ‚îú‚îÄ Time of day: {sched.time_of_day}
        ‚îú‚îÄ Cron: {sched.cron_expression}
        ‚îî‚îÄ Once: {sched.run_at}"""
    )

    if sched.schedule_type == "daily_time":
        scheduler.add_job(
            execute_analysis,
            trigger="cron",
            hour=sched.time_of_day.hour,
            minute=sched.time_of_day.minute,
            args=[sched],
            id=job_id,
            replace_existing=True
        )

    elif sched.schedule_type == "interval":
        scheduler.add_job(
            execute_analysis,
            trigger="interval",
            hours=sched.interval_hours or 0,
            minutes=sched.interval_minutes or 0,
            args=[sched],
            id=job_id,
            replace_existing=True
        )

    elif sched.schedule_type == "cron":
        from apscheduler.triggers.cron import CronTrigger
        trigger = CronTrigger.from_crontab(sched.cron_expression)
        scheduler.add_job(
            execute_analysis,
            trigger=trigger,
            args=[sched],
            id=job_id,
            replace_existing=True
        )

    elif sched.schedule_type == "once":
        scheduler.add_job(
            execute_analysis,
            trigger="date",
            run_date=sched.run_at,
            args=[sched],
            id=job_id,
            replace_existing=True
        )

    logger.success(
        f"üóìÔ∏è –ó–∞–¥–∞—á–∞ {job_id} ({sched.schedule_type}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")


def remove_schedule_job(schedule_id: str):
    try:
        scheduler.remove_job(schedule_id)
        logger.info(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {schedule_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {schedule_id}: {e}")
