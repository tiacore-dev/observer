from datetime import datetime, timedelta, timezone
from uuid import UUID

from loguru import logger

from app.database.models import AnalysisResult, Bot, Chat, ChatSchedule, TargetChat
from app.scheduler.init_scheduler import scheduler
from app.scheduler.tasks import analyze, save_analysis_result, send_analysis_result
from metrics.analysis_metrics import AnalysisMetrics

metrics = AnalysisMetrics()


async def execute_analysis(schedule: ChatSchedule, settings):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    try:
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ {schedule.chat.id}.")
        data = await analyze(schedule, settings)
        analysis_id = await save_analysis_result(data)

        if analysis_id:
            now = datetime.now(timezone.utc)

            if schedule.send_strategy == "fixed":
                if schedule.time_to_send is None:
                    logger.warning("time_to_send –Ω–µ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ 'fixed'")
                    await send_tasks(schedule, analysis_id)
                    return

                send_time_today = now.replace(
                    hour=schedule.time_to_send.hour,
                    minute=schedule.time_to_send.minute,
                    second=0,
                    microsecond=0,
                )

                if now >= send_time_today:
                    logger.info("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É.")
                    await send_tasks(schedule, analysis_id)
                else:
                    schedule_sending(schedule, analysis_id, send_time_today)

            elif schedule.send_strategy == "relative":
                if schedule.send_after_minutes is None:
                    logger.warning("send_after_minutes –Ω–µ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ 'relative'")
                    # fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
                    await send_tasks(schedule, analysis_id)
                else:
                    send_time = now + timedelta(minutes=schedule.send_after_minutes)
                    logger.info(
                        f"""–ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ {schedule.send_after_minutes} 
                        –º–∏–Ω—É—Ç ‚Äî –≤ {send_time}"""
                    )
                    schedule_sending(schedule, analysis_id, send_time)

            else:
                logger.warning(
                    f"""–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 
                    {schedule.send_strategy}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É."""
                )
                await send_tasks(schedule, analysis_id)
        schedule.last_run_at = datetime.now(timezone.utc)
        await schedule.save()
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è —á–∞—Ç–∞ {schedule.chat.id}.")

        metrics.inc_success(chat_id=str(schedule.chat.id), schedule_id=str(schedule.id))

        if schedule.schedule_type == "once":
            schedule.enabled = False
            await schedule.save()
            logger.info(f"üßπ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {schedule.id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ {schedule.chat.id}: {e}")
        metrics.inc_failure(chat_id=str(schedule.chat.id), schedule_id=str(schedule.id))


def schedule_sending(schedule: ChatSchedule, analysis_id: UUID, run_at: datetime):
    scheduler.add_job(
        send_tasks,
        trigger="date",
        run_date=run_at,
        args=[schedule, analysis_id],
        id=f"{schedule.id}_{analysis_id}",
        replace_existing=True,
    )


async def send_tasks(schedule: ChatSchedule, analysis_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π —á–∞—Å, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö.
    """

    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule.id}.")
    logger.debug(f"üì® –ü–æ–ª—É—á–∏–ª–∏ analysis_id: {analysis_id} ‚Äî —Ç–∏–ø: {type(analysis_id)}")

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        chat = await Chat.get_or_none(id=schedule.chat.id)
        if chat is None:
            logger.error(f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {schedule.id}")
            return

        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞: {chat.id}.")
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2—ã4 —á–∞—Å–∞
            analysis = await AnalysisResult.get_or_none(id=analysis_id)
            target_chat_relations = await TargetChat.filter(schedule=schedule).prefetch_related("chat").all()
            target_chats = [target_chat_relation.chat for target_chat_relation in target_chat_relations]
            bot = await Bot.get_or_none(id=schedule.bot.id)
            if not bot:
                raise ValueError()
            if analysis:
                logger.info(f"""–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–¥–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat.id}.""")
                await send_analysis_result(
                    target_chats, chat.name, bot.bot_token, analysis.result_text, schedule.message_intro
                )
            else:
                logger.warning(f"""–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ {chat.id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.""")
                await send_analysis_result(
                    target_chats, chat.name, bot.bot_token, "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", schedule.message_intro
                )
            logger.info(f"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat.id}.")
        except Exception as e:
            logger.error(
                f"""–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —á–∞—Ç–∞ {chat.id}: {e}""",
                exc_info=True,
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á: {e}", exc_info=True)
