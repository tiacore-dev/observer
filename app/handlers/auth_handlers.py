from datetime import datetime, timedelta
from jose import JWTError, jwt
from fastapi import HTTPException, Security, status
from fastapi.security import HTTPAuthorizationCredentials
from tortoise.queryset import Prefetch
from loguru import logger
from config import Settings
from app.database.models import Users, UserCompanyRelations
from app.auth_schemas import bearer_scheme

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è JWT
settings = Settings()
SECRET_KEY = settings.SECRET_KEY
ALGORITHM = settings.ALGORITHM
ACCESS_TOKEN_EXPIRE_MINUTES = int(settings.ACCESS_TOKEN_EXPIRE_MINUTES)
REFRESH_TOKEN_EXPIRE_DAYS = int(settings.REFRESH_TOKEN_EXPIRE_DAYS)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞


def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    # logger.info(f"Created Access JWT: {encoded_jwt}")
    return encoded_jwt

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞


def create_refresh_token(data: dict):
    return create_access_token(data, timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS))


async def get_current_admin(username: str) -> Users:
    user = await Users.filter(username=username).prefetch_related(
        Prefetch("user_relations", queryset=UserCompanyRelations.all(
        ).prefetch_related("company"))
    ).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return user


async def get_current_user(credentials: HTTPAuthorizationCredentials = Security(bearer_scheme)) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if credentials is None:
        logger.warning("‚ùå –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 401")
        raise HTTPException(status_code=401, detail="Missing token")

    if not credentials.credentials:
        logger.warning("‚ùå –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 401")
        raise HTTPException(status_code=401, detail="Empty token")

    token = credentials.credentials
    logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω: {token}")

    username = verify_token(token)
    user = await get_current_admin(username)
    return user


def verify_token(token: str) -> str:
    # logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: {token}")
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sub")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token",
            )
        # logger.success(f"–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, username: {username}")
        return username
    except JWTError as exc:
        logger.error("–û—à–∏–±–∫–∞ JWT-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token",
        ) from exc


async def login_handler(username: str, password: str):
    user = await Users.filter(username=username).first()

    if not user:
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    check_password = user.check_password(password)
    if check_password:
        return user

    return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
